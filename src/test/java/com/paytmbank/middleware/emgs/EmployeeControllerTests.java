package com.paytmbank.middleware.emgs;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.paytmbank.middleware.emgs.details.JwtRequest;
import com.paytmbank.middleware.emgs.entity.Employee;
import com.paytmbank.middleware.emgs.service.EmployeeService;
import io.jsonwebtoken.Jwt;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import javax.swing.plaf.synth.SynthTextAreaUI;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import static org.junit.jupiter.api.Assertions.assertTrue;

@SpringBootTest
@AutoConfigureMockMvc
class EmployeeControllerTests {

	@Autowired
	private MockMvc mockMvc;

	@Autowired
	private EmployeeService employeeService;

	@Autowired
	ObjectMapper objectMapper;

	/* The JWT token for current authenticated session. null if not authenticated. Passed in every request. */
	String token;

	/* List of all the created employees for the sake of testing */
	List<Employee> created;
	JwtRequest adminUser, normalUser;

	/* returns a 10 digit number */
	String randomPhone() {
		String phNoRand = "0123456789", ans = "";
		Random rnd = new Random();
		for (int i = 0; i < 10; i++) {
			ans += phNoRand.charAt(rnd.nextInt(10));
		}
		return ans;
	}

	/* Plugs random value and the @gmail.com to make a valid email. */
	String randomEmail(int sz) {
		String suffix = "@gmail.com", emailRand = "abcdefghijklmnopqrstuvwxyz", ans = "";
		Random rnd = new Random();
		for (int i = 0; i < 10; i++) {
			ans += emailRand.charAt(rnd.nextInt(26));
		}
		return ans + Integer.toString(sz) + suffix;
	}

	/* To generate Random password of size 15. */
	public String randomPassword() {
		int size = 15; // the first password is 15 characters long
		String pass = "";

		// A simple seed for the random number generator is the current system time.
		// A problem with this seed is that if two users are made within 1 miliseconds on the system, their password will be same.
		Random rn = new Random(System.currentTimeMillis());

		// the random number will extract the data from these different buckets. Some charcter groups are copied multiple times to increase
		// the probability of those to be included in the password.
		String buckets = "#&*!@#&*!@#&*!@#&*!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789#&*!@#&*!@#&*!@#&*!@01234567890123456789";
		int len = buckets.length();

		for (int i = 0; i < size; i++)
			pass += buckets.charAt(rn.nextInt(len));

		return pass;
	}

	void createRandomUsers() throws Exception {
		created = new ArrayList<>();

		/* First add an admin to the list */
		Employee admin = new Employee();
		admin.setEid("201851127");
		admin.setEmail(randomEmail(0));
		admin.setPhone(randomPhone());
		admin.setPassword("t@pS#(r#7");
		admin.setRole("ROLE_ADMIN");
		created.add(admin);

		while (created.size() != 10) {
			Employee curr = new Employee();
			// for the sake of testing email is the eid.
			curr.setEid(randomEmail(created.size()));
			curr.setEmail(randomEmail(created.size()));
			curr.setPhone(randomPhone());
			curr.setPassword(randomPassword());
			curr.setRole("ROLE_USER"); // ROLE_USER for all users generated by this method.

			boolean flag = true;
			for (int j = 0; j < created.size(); j++) {
				Employee temp = created.get(j);
				if (temp.getPhone() == curr.getPhone() || temp.getEmail() == curr.getEmail() || temp.getEid() == curr.getEid()) {
					flag = false;
					break;
				}
			}
			if (flag)
				created.add(curr);
		}

		/* Add the first user as the admin user, and second as normal user for testing. */
		adminUser = new JwtRequest();
		adminUser.setUsername(created.get(0).getEid());
		adminUser.setPassword(created.get(0).getPassword());

		System.out.println(adminUser.getUsername());
		System.out.println(adminUser.getPassword());

		normalUser = new JwtRequest();
		normalUser.setUsername(created.get(1).getEid());
		normalUser.setPassword(created.get(1).getPassword());

		/* Add an ROLE_USER and ROLE_ADMIN to the database directly, to test */
		try {
			employeeService.create(created.get(1));
			employeeService.create(created.get(0));
		} catch (Exception e) {
			System.out.println("Do nothing!!");
		}
	}

	/* Login to the application with `user`, and then save the JWT token. */
	void login(JwtRequest user) throws Exception {
		MvcResult mvcResult = mockMvc.perform(MockMvcRequestBuilders.post("/login")
				.contentType(MediaType.APPLICATION_JSON_VALUE)
				.content(objectMapper.writeValueAsString(user))
		).andExpect(
				MockMvcResultMatchers.status().isOk()
		).andReturn();

		token = mvcResult.getResponse().getContentAsString();
		System.out.println(token);
//		assertTrue(token != null);
	}

	/* Testing all the end points. */
	@Test
	@Order(1)
	void addUsersUsingUserRole() throws Exception {
		/* first create a set of users */
		createRandomUsers();

		/* Login to the controller using an user account. */
		login(normalUser);

		for (int i = 2; i < created.size(); i++) {
			mockMvc.perform(
					MockMvcRequestBuilders.post("/createEmployee")
							.header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
							.contentType(MediaType.APPLICATION_JSON_VALUE)
							.content(objectMapper.writeValueAsString(created.get(i)))
			).andExpect(
					MockMvcResultMatchers.status().isUnauthorized()
			);
		}

		mockMvc.perform(MockMvcRequestBuilders.post("/logout")
		).andExpect(
				MockMvcResultMatchers.status().is(302)
		);
	}

	@Test
	@Order(2)
	void addUsersUsingAdminRole() throws Exception {
		/* first create a set of users */
		createRandomUsers();

		/* Login to the controller using an admin account. */
		login(adminUser);

		for (int i = 2; i < created.size(); i++) {
			MvcResult result = mockMvc.perform(
					MockMvcRequestBuilders.post("/createEmployee").contentType(MediaType.APPLICATION_JSON)
							.content(objectMapper.writeValueAsString(created.get(i)))
							.header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
			).andExpect(
					MockMvcResultMatchers.status().isOk()
			).andReturn();

//			System.out.println(result.getRequest());
//			System.out.println(result.getResponse());
		}

		mockMvc.perform(MockMvcRequestBuilders.post("/logout")
		).andExpect(
				MockMvcResultMatchers.status().is(302)
		);
	}

	@Test
	@Order(3)
	void getUsers() throws Exception {
		createRandomUsers();
		login(adminUser);

		mockMvc.perform(
				MockMvcRequestBuilders.get("/users")
						.header(HttpHeaders.AUTHORIZATION, "Bearer " + token)
		).andExpect(
				MockMvcResultMatchers.status().isOk()
		);

		mockMvc.perform(MockMvcRequestBuilders.post("/logout")
		).andExpect(
				MockMvcResultMatchers.status().is(302)
		);
	}


	@Test
	@Order(4)
	void contextLoads() {

	}

}
